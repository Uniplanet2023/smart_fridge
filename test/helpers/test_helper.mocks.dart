// Mocks generated by Mockito 5.4.4 from annotations
// in smart_fridge/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:smart_fridge/core/domain_layer_entities/item.dart' as _i7;
import 'package:smart_fridge/core/domain_layer_entities/recipe.dart' as _i9;
import 'package:smart_fridge/features/fridge_management/domain/repository/item_repository.dart'
    as _i2;
import 'package:smart_fridge/features/fridge_management/domain/usecases/add_item_use_case.dart'
    as _i10;
import 'package:smart_fridge/features/fridge_management/domain/usecases/delete_item_use_case.dart'
    as _i12;
import 'package:smart_fridge/features/fridge_management/domain/usecases/edit_item_use_case.dart'
    as _i11;
import 'package:smart_fridge/features/fridge_management/domain/usecases/fetch_items_use_case.dart'
    as _i13;
import 'package:smart_fridge/features/receipt_scanning/domain/repository/gemini_read_receipt_repository.dart'
    as _i3;
import 'package:smart_fridge/features/receipt_scanning/domain/repository/scanned_items_repository.dart'
    as _i4;
import 'package:smart_fridge/features/receipt_scanning/domain/usecases/read_receipt_use_case.dart'
    as _i14;
import 'package:smart_fridge/features/receipt_scanning/domain/usecases/save_items_usecase.dart'
    as _i15;
import 'package:smart_fridge/features/recipe_generation/domain/repository/recipe_generation_repository.dart'
    as _i5;
import 'package:smart_fridge/features/recipe_generation/domain/usecases/generate_recipe_use_case.dart'
    as _i16;
import 'package:smart_fridge/features/recipe_generation/domain/usecases/save_recipe_use_case.dart'
    as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeItemRepository_0 extends _i1.SmartFake
    implements _i2.ItemRepository {
  _FakeItemRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReadReceiptRepository_1 extends _i1.SmartFake
    implements _i3.ReadReceiptRepository {
  _FakeReadReceiptRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScannedItemsRepository_2 extends _i1.SmartFake
    implements _i4.ScannedItemsRepository {
  _FakeScannedItemsRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecipeRepository_3 extends _i1.SmartFake
    implements _i5.RecipeRepository {
  _FakeRecipeRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ItemRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemRepository extends _i1.Mock implements _i2.ItemRepository {
  MockItemRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> addItem(_i7.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #addItem,
          [item],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteItem(_i7.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [item],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateItem(_i7.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [item],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i7.Item?> getItem(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [id],
        ),
        returnValue: _i6.Future<_i7.Item?>.value(),
      ) as _i6.Future<_i7.Item?>);

  @override
  _i6.Future<List<_i7.Item>> getAllItems() => (super.noSuchMethod(
        Invocation.method(
          #getAllItems,
          [],
        ),
        returnValue: _i6.Future<List<_i7.Item>>.value(<_i7.Item>[]),
      ) as _i6.Future<List<_i7.Item>>);
}

/// A class which mocks [ReadReceiptRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadReceiptRepository extends _i1.Mock
    implements _i3.ReadReceiptRepository {
  MockReadReceiptRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i7.Item>> readReceipt(_i8.File? receiptImage) =>
      (super.noSuchMethod(
        Invocation.method(
          #readReceipt,
          [receiptImage],
        ),
        returnValue: _i6.Future<List<_i7.Item>>.value(<_i7.Item>[]),
      ) as _i6.Future<List<_i7.Item>>);
}

/// A class which mocks [ScannedItemsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockScannedItemsRepository extends _i1.Mock
    implements _i4.ScannedItemsRepository {
  MockScannedItemsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> saveItems(List<_i7.Item>? items) => (super.noSuchMethod(
        Invocation.method(
          #saveItems,
          [items],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [RecipeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeRepository extends _i1.Mock implements _i5.RecipeRepository {
  MockRecipeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i9.Recipe>> generateRecipe(
    List<_i7.Item>? ingredients,
    String? cuisine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateRecipe,
          [
            ingredients,
            cuisine,
          ],
        ),
        returnValue: _i6.Future<List<_i9.Recipe>>.value(<_i9.Recipe>[]),
      ) as _i6.Future<List<_i9.Recipe>>);

  @override
  _i6.Future<void> saveRecipe(_i9.Recipe? recipe) => (super.noSuchMethod(
        Invocation.method(
          #saveRecipe,
          [recipe],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [AddItemUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddItemUseCase extends _i1.Mock implements _i10.AddItemUseCase {
  MockAddItemUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ItemRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeItemRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ItemRepository);

  @override
  _i6.Future<void> call(_i7.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [item],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [UpdateItemUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateItemUseCase extends _i1.Mock implements _i11.UpdateItemUseCase {
  MockUpdateItemUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ItemRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeItemRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ItemRepository);

  @override
  _i6.Future<void> call(_i7.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [item],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [DeleteItemUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteItemUseCase extends _i1.Mock implements _i12.DeleteItemUseCase {
  MockDeleteItemUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ItemRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeItemRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ItemRepository);

  @override
  _i6.Future<void> call(_i7.Item? deletedItem) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [deletedItem],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [FetchItemsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchItemsUseCase extends _i1.Mock implements _i13.FetchItemsUseCase {
  MockFetchItemsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ItemRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeItemRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ItemRepository);

  @override
  _i6.Future<List<_i7.Item>?> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<List<_i7.Item>?>.value(),
      ) as _i6.Future<List<_i7.Item>?>);
}

/// A class which mocks [ReadReceiptUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadReceiptUseCase extends _i1.Mock
    implements _i14.ReadReceiptUseCase {
  MockReadReceiptUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ReadReceiptRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeReadReceiptRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.ReadReceiptRepository);

  @override
  _i6.Future<List<_i7.Item>> call(_i8.File? receiptImage) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [receiptImage],
        ),
        returnValue: _i6.Future<List<_i7.Item>>.value(<_i7.Item>[]),
      ) as _i6.Future<List<_i7.Item>>);
}

/// A class which mocks [SaveItemsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveItemsUseCase extends _i1.Mock implements _i15.SaveItemsUseCase {
  MockSaveItemsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ScannedItemsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeScannedItemsRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.ScannedItemsRepository);

  @override
  _i6.Future<void> call(List<_i7.Item>? items) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [items],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [GenerateRecipeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenerateRecipeUseCase extends _i1.Mock
    implements _i16.GenerateRecipeUseCase {
  MockGenerateRecipeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RecipeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRecipeRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.RecipeRepository);

  @override
  _i6.Future<List<_i9.Recipe>> call(
    List<_i7.Item>? ingredients,
    String? cuisine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            ingredients,
            cuisine,
          ],
        ),
        returnValue: _i6.Future<List<_i9.Recipe>>.value(<_i9.Recipe>[]),
      ) as _i6.Future<List<_i9.Recipe>>);
}

/// A class which mocks [SaveRecipeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveRecipeUseCase extends _i1.Mock implements _i17.SaveRecipeUseCase {
  MockSaveRecipeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RecipeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRecipeRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.RecipeRepository);

  @override
  _i6.Future<void> call(_i9.Recipe? recipe) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [recipe],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
